- The best way to discover IDORs is through a source code review that checks if all direct object references are protected
by access control, But if you cannot access the application’s source code, here’s a simple and effective way to test for IDORs.

- Step 1: Create Two Accounts :
- First, create two different accounts on the target website. If users can have different permissions on the site, create two accounts for each permission level. For example, create two admin accounts, two regular user accounts, two group member accounts, and two non-group-member accounts. This will help you test for access control issues among similar user accounts, as well as across users with different privileges
	
- Continuing the previous example, you could create two accounts on example.com: user 1235 and user 1236. One of the accounts would serve as your attacker account, used to carry out the IDOR attacks. The other would be the victim account used to observe the effects of the attack. The message pages for the two users would have the following URLS:
https://example.com/messages?user_id=1235 (Attacker)
https://example.com/messages?user_id=1236 (Victim)
	
- In addition to testing with two accounts, you should also repeat the testing procedure without signing in. See if you can use an unauthenticated session to access the information or functionalities made available to legitimate users.

- Step 2: Discover Features :
- try to discover as many application features as possible. Use the highest privileged account you own and go through the application, looking for application features to test.
	
- Pay special attention to functionalities that return user information or modify user data. Note them for future reference. Here are some features that might have IDORs on example.com:
This endpoint lets you read user messages:
https://example.com/messages?user_id=1236

This one lets you read user files:
https://example.com/uploads?file=user1236-01.jpeg

This endpoint deletes user messages:
POST /delete_message
(POST request body)
message_id=user1236-0111

This one is for accessing group files:
https://example.com/group_files?group=group3

This one deletes a group:
POST /delete_group
(POST request body)
group=group3

- Step 3: Capture Requests :
- Browse through each application feature you mapped in the preceding step and capture all the requests going from your web client to the server. Inspect each request carefully and find the parameters that contain numbers, usernames, or IDs. Remember that you can trigger IDORs from different locations within a request, like URL parameters, form fields, filepaths, headers, and
cookies.

- To make testing more efficient, use two browsers, and log into a different account in each. Then manipulate the requests coming from one browser to see if the change is immediately reflected on the other account. For example, let’s say you create two accounts, 1235 and 1236. Log into 1235 in Firefox and 1236 in Chrome.

- Use Burp to modify the traffic coming from Firefox. Turn on Intercept in the Proxy tab and edit requests in the proxy text window. Check if your attack has succeeded by observing the changes reflected on the victim account in Chrome.

- Also, note that APIs like Representational State Transfer (REST) and GraphQL are often found to be vulnerable to IDOR too. Be on the lookout for these endpoints. You can use the recon techniques from Chapter 5 to discover additional endpoints. Then follow this testing methodology to switch out IDs found in those endpoints as well.

- Step 4: Change the IDs :
- switch the IDs in the sensitive requests and check if the information returned also changes. See if you can access the victim account’s information by using the attacker account. And check if you can modify the second user’s account from the first.
For example, in this setup, you can try to access the functionalities that user 1236 has access to via your Firefox browser:
This endpoint lets you read user messages:
https://example.com/messages?user_id=1236

This one lets you read user files:
https://example.com/uploads?file=user1236-01.jpeg

This endpoint deletes user messages:
POST /delete_message
(POST request body)
message_id=user1236-0111

This one is for accessing group files:
https://example.com/group_files?group=group3

This endpoint deletes a group:
POST /delete_group
(POST request body)
group=group3

- If any of these requests succeed in accessing or modifying user 1236’s information, you’ve found an IDOR vulnerability

